"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@inquirer/core");
const chalk_1 = __importDefault(require("chalk"));
const figures_1 = __importDefault(require("figures"));
const ansi_escapes_1 = __importDefault(require("ansi-escapes"));
exports.default = (0, core_1.createPrompt)((config, done) => {
    const { choices } = config;
    const startIndex = Math.max(choices.findIndex(({ disabled }) => !disabled), 0);
    const paginator = (0, core_1.useRef)(new core_1.Paginator()).current;
    const firstRender = (0, core_1.useRef)(true);
    const prefix = (0, core_1.usePrefix)();
    const [status, setStatus] = (0, core_1.useState)('pending');
    const [cursorPosition, setCursorPos] = (0, core_1.useState)(startIndex);
    (0, core_1.useKeypress)((key) => {
        if ((0, core_1.isEnterKey)(key)) {
            setStatus('done');
            done(choices[cursorPosition].value);
        }
        else if ((0, core_1.isUpKey)(key) || (0, core_1.isDownKey)(key)) {
            let newCursorPosition = cursorPosition;
            const offset = (0, core_1.isUpKey)(key) ? -1 : 1;
            let selectedOption;
            while (!selectedOption || selectedOption.disabled) {
                newCursorPosition =
                    (newCursorPosition + offset + choices.length) % choices.length;
                selectedOption = choices[newCursorPosition];
            }
            setCursorPos(newCursorPosition);
        }
        else if ((0, core_1.isNumberKey)(key)) {
            // Adjust index to start at 1
            const newCursorPosition = Number(key.name) - 1;
            // Abort if the choice doesn't exists or if disabled
            if (!choices[newCursorPosition] || choices[newCursorPosition].disabled) {
                return;
            }
            setCursorPos(newCursorPosition);
        }
    });
    let message = chalk_1.default.bold(config.message);
    if (firstRender.current) {
        message += chalk_1.default.dim(' (Use arrow keys)');
        firstRender.current = false;
    }
    if (status === 'done') {
        const choice = choices[cursorPosition];
        return `${prefix} ${message} ${chalk_1.default.cyan(choice.name || choice.value)}`;
    }
    const allChoices = choices
        .map(({ name, value, disabled }, index) => {
        const line = name || value;
        if (disabled) {
            return chalk_1.default.dim(`- ${line} ${typeof disabled === 'string' ? disabled : '(disabled)'}`);
        }
        if (index === cursorPosition) {
            return chalk_1.default.cyan(`${figures_1.default.pointer} ${line}`);
        }
        return `  ${line}`;
    })
        .join('\n');
    const windowedChoices = paginator.paginate(allChoices, cursorPosition, config.pageSize);
    const choice = choices[cursorPosition];
    const choiceDescription = choice && choice.description ? `\n${choice.description}` : ``;
    return `${prefix} ${message}\n${windowedChoices}${choiceDescription}${ansi_escapes_1.default.cursorHide}`;
});
